【注册】用户名和密码接收：
    1. 校验是否有username和password
        a. 字段正常，走到2
        b. 字段有错误，立即返回消息（用户名和密码错误）
    2. 查询数据库有没有这个username
        a. 已经存在该用户，返回消息（请勿重复注册）
        b. 不存在该用户，走到3
    3. 赋予默认头像，用户名，密码
        a. 默认头像生成
        b. 返回注册成功前端

 【规范返回信息的结构】
 {
     errCode: 0,
     message: "注册成功",
     data: {}
 }

 【登录】用户名和密码接收：
    1. 校验是否有username和password
        a. 字段正常，走到2
        b. 字段有错误，立即返回消息（用户名和密码错误）
    2. 查询数据库有没有这个username
        a. 已经存在该用户，返回消息（请勿重复注册）
        b. 不存在该用户，返回消息（请先注册）
    3. 把生成的token存入user表，并且查询对应用户的信息返回前端

  【获取用户信息】
    1. 前端传送token过来
        鉴权（鉴别token） —— 除了登录注册，所有接口都需要鉴权
        需要鉴权
            - token生效，可以进行步骤2
            - token没生效，token过期/没这个用户 --让前端提醒用户重新登录
    2. 从数据库检索该用户的所有信息
        根据token去知道是哪个用户，并且返回对应的信息给前端；

   【修改用户信息】
    1. 前端传username, password, token过来
        a. 鉴权
        b. 校验字段
    2. 到数据库替换用户名或密码

   【图片上传逻辑】
    1. 前后端要协约好图片的字段 - avatar
    2. 后端逻辑：
        a. 鉴权
        b. 接收到前端传过来的图片
          - 判断大小是否超过限制（20k)
          - 设置单图上传
          - 修改图片名字(aaa-时间戳.jpg)
          - 存储前端传过来的图片
          - 读取数据库的整条用户信息，返回给前端
    3. 前端逻辑：
        a. 调用组件
        b. 设置请求的地址和token
        c. 修改localStorage,更新Header组件

   【用户角色权限】
    1. 管理员
        给普通用户增加编辑权限
        自己可以编辑文章
        {
            设置普通用户的编辑权限
            自己可以编辑文章
        }
    2. 普通用户
        无法编辑文章
        可以在管理员的许可下编辑文章
        所有用户注册时都是普通用户

   【用户角色权限】
    1. 管理员可以编辑
    2. 普通用户需要管理员赋予权限；

    重新优化注册的代码（player, editable)
    登录成功需要返回player和editable字段

   【文章编辑】
    0. 鉴权
    1. 前端传文章id过来
    2. 到数据库查找对应id的文章
    3. title，subTitle，content，date，author字段修改

   【分页逻辑】
      *前端做分页 尽量不做
      *后端做分页
         1. 从数据库查询所有文章，得到数组
         2. 按照前端指定的页数和页数量，切割数组，返回对应的数据
         3. 返回给前端当前第几页，每页几条数据，总共几页
      *前端请求后端处理好的分页
         1. 传当前页码，和每页显示数据
